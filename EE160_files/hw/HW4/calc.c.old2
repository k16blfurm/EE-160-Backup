/*   File:    driver2.c
     by:    Blaine Furman
     date:
 */

/*  This file contains a test driver for experimenting with
 the .....
 */

#include <stdio.h>
#include "display.h"
#include "exponent.h"
#include "opnd.h"
#include "chrutil.h"
#include "presults.h"
#include "ops.h"
#include "compute.h"
/*#define DEBUG*/
/*#define DEBUG2*/
/*#define FINAL*/
#define FINAL2

int main()
{
    char ch;
    int old = 0;
    int base;
    int	 ans;
    int prev;
    char op;
    char base1;
    char expon;
    char total_expon;
    int conv, flag;
    int flag1;
    int more;

    /*  Initialize the dispaly with a message  */
    write_message("Display Test");

    /*initialize variables*/
    flag1 = FALSE;
    more = FALSE;

    ch = getchar();

    while((ch < '0' || ch > '9') && ch != 'q')
        ch = getchar();

    while(ch != 'q')
    {

	while(ch != '=' && ch != 'q')
	{
        /*filter through characters*/
        while((ch < '0' || ch > '9') && ch != 'q')
            ch = getchar();

        base = flag = get_opnd(ch);
        /*if they did, quit the program*/
        if(flag == 'q')
        {
            ch = 'q';
            /*write the quit to the display (quit program)*/
            write_char(ch);
            return 0;
        }

	ch = getchar();
	/*Get the operator*/
	while(ch != '+' && ch != '-' && ch != 'x' && ch != '/' && ch != '=')
	{
	ch = getchar();
	}


#ifdef FINAL
printf("operator is %c", op);
#endif

	/* save the operator */
	op = ch;
	write_char(op);

	

	/*get the results if two operators*/
	if(flag1 = TRUE)
	{
	printf("here");
	ans = compute_result(prev, op, base);
	more = TRUE;
	}

	/*compute if more than one operator*/
	if(more = TRUE)
	{
	ans = compute_result(ans, op, base);
	more = 1;
	}

	/* save the old operand if first value*/
	if(flag1 = TRUE)
	prev = base;

	/*if second operator, assign value*/
	if(more = TRUE)
	prev = ans;

	/*flag for more than one operator*/
	flag1 = TRUE;

	}
	
#ifdef FINAL2
printf("num is %d\n", ans);
#endif

	while(ch != 'q' && ch != '\r')
	ch = getchar();

	/*clear old answer*/
	ans = 0;

        /*actually clear the screen*/
        write_char(ch);

	flag1 = FALSE;
	more = FALSE;

    }
}
